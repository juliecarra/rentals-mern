{"ast":null,"code":"// import React from \"react\";\n// //import { Cacher } from \"../../services/cacher\";\n// import {\n//   withScriptjs,\n//   withGoogleMap,\n//   GoogleMap,\n//   Circle,\n//   InfoWindow\n// } from \"react-google-maps\";\n// function MapComponent(props) {\n//   const { coordinates, isError, isLocationLoaded } = props;\n//   return (\n//     <GoogleMap\n//       defaultZoom={13}\n//       defaultCenter={coordinates}\n//       center={coordinates}\n//       options={{ disableDefaultUI: isError ? true : false }}\n//     >\n//       {isLocationLoaded && !isError && (\n//         <Circle center={coordinates} radius={500} />\n//       )}\n//       {isLocationLoaded && isError && (\n//         <InfoWindow position={coordinates} options={{ maxWidth: 300 }}>\n//           <div>\n//             Uuuuups, there is problem to find location on the map, we are trying\n//             to resolve problem as fast as possible. Contact host for additional\n//             informations if you are still interested in booking this place. We\n//             are sorry for incoviniance.\n//           </div>\n//         </InfoWindow>\n//       )}\n//     </GoogleMap>\n//   );\n// }\n// function withGeocode(WrappedComponent) {\n//   return class extends React.Component {\n//     constructor() {\n//       super();\n//       // this.cacher = new Cacher();\n//       this.state = {\n//         coordinates: {\n//           lat: 0,\n//           lng: 0\n//         },\n//         isError: false,\n//         isLocationLoaded: false\n//       };\n//     }\n//     // componentWillMount() {\n//     //   this.getGeocodedLocation();\n//     // }\n//     componentDidUpdate() {\n//       if (this.props.isReloading) {\n//         this.getGeocodedLocation();\n//       }\n//     }\n//     updateCoordinates(coordinates) {\n//       this.props.mapLoaded();\n//       this.setState({\n//         coordinates,\n//         isLocationLoaded: true\n//       });\n//     }\n//     geocodeLocation(location) {\n//       const geocoder = new window.google.maps.Geocoder();\n//       return new Promise((resolve, reject) => {\n//         geocoder.geocode({ address: location }, (result, status) => {\n//           if (status === \"OK\") {\n//             const geometry = result[0].geometry.location;\n//             const coordinates = { lat: geometry.lat(), lng: geometry.lng() };\n//             //   this.cacher.cacheValue(location, coordinates);\n//             resolve(coordinates);\n//           } else {\n//             reject(\"ERROR!!!!\");\n//           }\n//         });\n//       });\n//     }\n//     // getGeocodedLocation() {\n//     //   const location = this.props.location;\n//     //   if (this.cacher.isValueCached(location)) {\n//     //     this.updateCoordinates(this.cacher.getCachedValue(location));\n//     //   } else {\n//     //     this.geocodeLocation(location).then(\n//     //       coordinates => {\n//     //         this.updateCoordinates(coordinates);\n//     //       },\n//     //       error => {\n//     //         this.props.mapLoaded();\n//     //         this.setState({ isLocationLoaded: true, isError: true });\n//     //       }\n//     //     );\n//     //   }\n//     // }\n//     render() {\n//       return <WrappedComponent {...this.state} />;\n//     }\n//   };\n// }\n// export const MapWithGeocode = withScriptjs(\n//   withGoogleMap(withGeocode(MapComponent))\n// );","map":{"version":3,"sources":["/Users/Julie-Marie-Carra/Desktop/server/client/src/components/GoogleMap/GoogleMap.jsx"],"names":[],"mappingssourcesContent":["// import React from \"react\";\n// //import { Cacher } from \"../../services/cacher\";\n\n// import {\n//   withScriptjs,\n//   withGoogleMap,\n//   GoogleMap,\n//   Circle,\n//   InfoWindow\n// } from \"react-google-maps\";\n\n// function MapComponent(props) {\n//   const { coordinates, isError, isLocationLoaded } = props;\n\n//   return (\n//     <GoogleMap\n//       defaultZoom={13}\n//       defaultCenter={coordinates}\n//       center={coordinates}\n//       options={{ disableDefaultUI: isError ? true : false }}\n//     >\n//       {isLocationLoaded && !isError && (\n//         <Circle center={coordinates} radius={500} />\n//       )}\n//       {isLocationLoaded && isError && (\n//         <InfoWindow position={coordinates} options={{ maxWidth: 300 }}>\n//           <div>\n//             Uuuuups, there is problem to find location on the map, we are trying\n//             to resolve problem as fast as possible. Contact host for additional\n//             informations if you are still interested in booking this place. We\n//             are sorry for incoviniance.\n//           </div>\n//         </InfoWindow>\n//       )}\n//     </GoogleMap>\n//   );\n// }\n\n// function withGeocode(WrappedComponent) {\n//   return class extends React.Component {\n//     constructor() {\n//       super();\n\n//       // this.cacher = new Cacher();\n\n//       this.state = {\n//         coordinates: {\n//           lat: 0,\n//           lng: 0\n//         },\n//         isError: false,\n//         isLocationLoaded: false\n//       };\n//     }\n\n//     // componentWillMount() {\n//     //   this.getGeocodedLocation();\n//     // }\n\n//     componentDidUpdate() {\n//       if (this.props.isReloading) {\n//         this.getGeocodedLocation();\n//       }\n//     }\n\n//     updateCoordinates(coordinates) {\n//       this.props.mapLoaded();\n\n//       this.setState({\n//         coordinates,\n//         isLocationLoaded: true\n//       });\n//     }\n\n//     geocodeLocation(location) {\n//       const geocoder = new window.google.maps.Geocoder();\n\n//       return new Promise((resolve, reject) => {\n//         geocoder.geocode({ address: location }, (result, status) => {\n//           if (status === \"OK\") {\n//             const geometry = result[0].geometry.location;\n//             const coordinates = { lat: geometry.lat(), lng: geometry.lng() };\n\n//             //   this.cacher.cacheValue(location, coordinates);\n\n//             resolve(coordinates);\n//           } else {\n//             reject(\"ERROR!!!!\");\n//           }\n//         });\n//       });\n//     }\n\n//     // getGeocodedLocation() {\n//     //   const location = this.props.location;\n\n//     //   if (this.cacher.isValueCached(location)) {\n//     //     this.updateCoordinates(this.cacher.getCachedValue(location));\n//     //   } else {\n//     //     this.geocodeLocation(location).then(\n//     //       coordinates => {\n//     //         this.updateCoordinates(coordinates);\n//     //       },\n//     //       error => {\n//     //         this.props.mapLoaded();\n//     //         this.setState({ isLocationLoaded: true, isError: true });\n//     //       }\n//     //     );\n//     //   }\n//     // }\n\n//     render() {\n//       return <WrappedComponent {...this.state} />;\n//     }\n//   };\n// }\n\n// export const MapWithGeocode = withScriptjs(\n//   withGoogleMap(withGeocode(MapComponent))\n// );\n"]},"metadata":{},"sourceType":"module"}