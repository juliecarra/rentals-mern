{"ast":null,"code":"var _jsxFileName = \"/Users/Julie-Marie-Carra/Desktop/server/client/src/components/GoogleMap/GoogleMap.jsx\";\n// import React from \"react\";\n// import {\n//   withScriptjs,\n//   withGoogleMap,\n//   GoogleMap,\n//   Circle,\n//   InfoWindow\n// } from \"react-google-maps\";\n// function MapComponent(props) {\n//   const { coordinates, isError, isLocationLoaded } = props;\n//   return (\n//     <GoogleMap\n//       defaultZoom={13}\n//       defaultCenter={coordinates}\n//       center={coordinates}\n//       options={{ disableDefaultUI: isError ? true : false }}\n//     >\n//       {isLocationLoaded && !isError && (\n//         <Circle center={coordinates} radius={500} />\n//       )}\n//       {isLocationLoaded && isError && (\n//         <InfoWindow position={coordinates} options={{ maxWidth: 300 }}>\n//           <div>\n//             Uuuuups, there is problem to find location on the map, we are trying\n//             to resolve problem as fast as possible. Contact host for additional\n//             informations if you are still interested in booking this place. We\n//             are sorry for incoviniance.\n//           </div>\n//         </InfoWindow>\n//       )}\n//     </GoogleMap>\n//   );\n// }\n// function withGeocode(WrappedComponent) {\n//   return class extends React.Component {\n//     constructor() {\n//       super();\n//       // this.cacher = new Cacher();\n//       this.state = {\n//         coordinates: {\n//           lat: 0,\n//           lng: 0\n//         },\n//         isError: false,\n//         isLocationLoaded: false\n//       };\n//     }\n//     // componentWillMount() {\n//     //   this.getGeocodedLocation();\n//     // }\n//     componentDidUpdate() {\n//       if (this.props.isReloading) {\n//         this.getGeocodedLocation();\n//       }\n//     }\n//     updateCoordinates(coordinates) {\n//       this.props.mapLoaded();\n//       this.setState({\n//         coordinates,\n//         isLocationLoaded: true\n//       });\n//     }\n//     geocodeLocation(location) {\n//       const geocoder = new window.google.maps.Geocoder();\n//       return new Promise((resolve, reject) => {\n//         geocoder.geocode({ address: location }, (result, status) => {\n//           if (status === \"OK\") {\n//             const geometry = result[0].geometry.location;\n//             const coordinates = { lat: geometry.lat(), lng: geometry.lng() };\n//             //   this.cacher.cacheValue(location, coordinates);\n//             resolve(coordinates);\n//           } else {\n//             reject(\"ERROR!!!!\");\n//           }\n//         });\n//       });\n//     }\n//     // getGeocodedLocation() {\n//     //   const location = this.props.location;\n//     //   if (this.cacher.isValueCached(location)) {\n//     //     this.updateCoordinates(this.cacher.getCachedValue(location));\n//     //   } else {\n//     //     this.geocodeLocation(location).then(\n//     //       coordinates => {\n//     //         this.updateCoordinates(coordinates);\n//     //       },\n//     //       error => {\n//     //         this.props.mapLoaded();\n//     //         this.setState({ isLocationLoaded: true, isError: true });\n//     //       }\n//     //     );\n//     //   }\n//     // }\n//     render() {\n//       return <WrappedComponent {...this.state} />;\n//     }\n//   };\n// }\n// export const MapWithGeocode = withScriptjs(\n//   withGoogleMap(withGeocode(MapComponent))\n// );\nimport React from \"react\";\nimport { Cacher } from \"../../services/cacher\";\nimport { withScriptjs, withGoogleMap, GoogleMap, Marker, Circle, InfoWindow } from \"react-google-maps\";\n\nfunction MapComponent(props) {\n  const {\n    coordinates\n  } = props;\n  return React.createElement(GoogleMap, {\n    defaultZoom: 13,\n    defaultCenter: coordinates,\n    center: coordinates,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, React.createElement(Circle, {\n    center: coordinates,\n    radius: 500,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }), isLocationLoaded && isError && React.createElement(InfoWindow, {\n    position: coordinates,\n    options: {\n      maxWidth: 300\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, \"Oups, there is problem to find location on the map, we are trying to resolve problem as fast as possible. Contact host for additional informations if you are still interested in booking this place. We are sorry for incoviniance.\")));\n}\n\nfunction withGeocode(WrappedComponent) {\n  return class extends React.Component {\n    constructor(props) {\n      super(props);\n      this.cacher = new Cacher();\n      this.state = {\n        coordinates: {\n          lat: 0,\n          lng: 0\n        },\n        isError: false,\n        isLocationLoaded: false\n      };\n    }\n\n    componentDidMount() {\n      this.getGeocodeLocation();\n    }\n\n    updateCoordinates(coordinates) {\n      this.props.mapLoaded();\n      this.setState({\n        coordinates,\n        isLocationLoaded: true\n      });\n    }\n\n    geocodeLocation(location) {\n      const geocoder = new window.google.maps.Geocoder();\n      return new Promise((resolve, reject) => {\n        geocoder.geocode({\n          address: location\n        }, (result, status) => {\n          if (status === \"OK\") {\n            const geometry = result[0].geometry.location;\n            const coordinates = {\n              lat: geometry.lat(),\n              lng: geometry.lng()\n            };\n            this.cacher.cacheValue(location, coordinates);\n            resolve(coordinates);\n          } else {\n            reject(\"ERROR\");\n          }\n        });\n      });\n    }\n\n    getGeocodeLocation() {\n      const location = this.props.location; //if location is cached returned cached value\n\n      if (this.cacher.isValueCached(location)) {\n        this.setState({\n          coordinates: this.cacher.getCachedValue(location)\n        });\n      } //else geocode location\n      else {\n          this.geocodeLocation(location).then(coordinates => {\n            this.setState({\n              coordinates\n            });\n          }, error => {\n            console.log(error);\n            this.props.mapLoaded();\n            this.setState({\n              isLocationLoaded: true,\n              isError: true\n            });\n          });\n        }\n    }\n\n    render() {\n      return React.createElement(WrappedComponent, Object.assign({}, this.state, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      }));\n    }\n\n  };\n}\n\nexport const MapWithAMarker = withScriptjs(withGoogleMap(withGeocode(MapComponent)));","map":{"version":3,"sources":["/Users/Julie-Marie-Carra/Desktop/server/client/src/components/GoogleMap/GoogleMap.jsx"],"names":["React","Cacher","withScriptjs","withGoogleMap","GoogleMap","Marker","Circle","InfoWindow","MapComponent","props","coordinates","isLocationLoaded","isError","maxWidth","withGeocode","WrappedComponent","Component","constructor","cacher","state","lat","lng","componentDidMount","getGeocodeLocation","updateCoordinates","mapLoaded","setState","geocodeLocation","location","geocoder","window","google","maps","Geocoder","Promise","resolve","reject","geocode","address","result","status","geometry","cacheValue","isValueCached","getCachedValue","then","error","console","log","render","MapWithAMarker"],"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","sourcesContent":["// import React from \"react\";\n\n// import {\n//   withScriptjs,\n//   withGoogleMap,\n//   GoogleMap,\n//   Circle,\n//   InfoWindow\n// } from \"react-google-maps\";\n\n// function MapComponent(props) {\n//   const { coordinates, isError, isLocationLoaded } = props;\n\n//   return (\n//     <GoogleMap\n//       defaultZoom={13}\n//       defaultCenter={coordinates}\n//       center={coordinates}\n//       options={{ disableDefaultUI: isError ? true : false }}\n//     >\n//       {isLocationLoaded && !isError && (\n//         <Circle center={coordinates} radius={500} />\n//       )}\n//       {isLocationLoaded && isError && (\n//         <InfoWindow position={coordinates} options={{ maxWidth: 300 }}>\n//           <div>\n//             Uuuuups, there is problem to find location on the map, we are trying\n//             to resolve problem as fast as possible. Contact host for additional\n//             informations if you are still interested in booking this place. We\n//             are sorry for incoviniance.\n//           </div>\n//         </InfoWindow>\n//       )}\n//     </GoogleMap>\n//   );\n// }\n\n// function withGeocode(WrappedComponent) {\n//   return class extends React.Component {\n//     constructor() {\n//       super();\n\n//       // this.cacher = new Cacher();\n\n//       this.state = {\n//         coordinates: {\n//           lat: 0,\n//           lng: 0\n//         },\n//         isError: false,\n//         isLocationLoaded: false\n//       };\n//     }\n\n//     // componentWillMount() {\n//     //   this.getGeocodedLocation();\n//     // }\n\n//     componentDidUpdate() {\n//       if (this.props.isReloading) {\n//         this.getGeocodedLocation();\n//       }\n//     }\n\n//     updateCoordinates(coordinates) {\n//       this.props.mapLoaded();\n\n//       this.setState({\n//         coordinates,\n//         isLocationLoaded: true\n//       });\n//     }\n\n//     geocodeLocation(location) {\n//       const geocoder = new window.google.maps.Geocoder();\n\n//       return new Promise((resolve, reject) => {\n//         geocoder.geocode({ address: location }, (result, status) => {\n//           if (status === \"OK\") {\n//             const geometry = result[0].geometry.location;\n//             const coordinates = { lat: geometry.lat(), lng: geometry.lng() };\n\n//             //   this.cacher.cacheValue(location, coordinates);\n\n//             resolve(coordinates);\n//           } else {\n//             reject(\"ERROR!!!!\");\n//           }\n//         });\n//       });\n//     }\n\n//     // getGeocodedLocation() {\n//     //   const location = this.props.location;\n\n//     //   if (this.cacher.isValueCached(location)) {\n//     //     this.updateCoordinates(this.cacher.getCachedValue(location));\n//     //   } else {\n//     //     this.geocodeLocation(location).then(\n//     //       coordinates => {\n//     //         this.updateCoordinates(coordinates);\n//     //       },\n//     //       error => {\n//     //         this.props.mapLoaded();\n//     //         this.setState({ isLocationLoaded: true, isError: true });\n//     //       }\n//     //     );\n//     //   }\n//     // }\n\n//     render() {\n//       return <WrappedComponent {...this.state} />;\n//     }\n//   };\n// }\n\n// export const MapWithGeocode = withScriptjs(\n//   withGoogleMap(withGeocode(MapComponent))\n// );\n\nimport React from \"react\";\nimport { Cacher } from \"../../services/cacher\";\n\nimport {\n  withScriptjs,\n  withGoogleMap,\n  GoogleMap,\n  Marker,\n  Circle,\n  InfoWindow\n} from \"react-google-maps\";\n\nfunction MapComponent(props) {\n  const { coordinates } = props;\n  return (\n    <GoogleMap\n      defaultZoom={13}\n      defaultCenter={coordinates}\n      center={coordinates}\n    >\n      <Circle center={coordinates} radius={500} />\n      {isLocationLoaded && isError && (\n        <InfoWindow position={coordinates} options={{ maxWidth: 300 }}>\n          <div>\n            Oups, there is problem to find location on the map, we are trying to\n            resolve problem as fast as possible. Contact host for additional\n            informations if you are still interested in booking this place. We\n            are sorry for incoviniance.\n          </div>\n        </InfoWindow>\n      )}\n    </GoogleMap>\n  );\n}\n\nfunction withGeocode(WrappedComponent) {\n  return class extends React.Component {\n    constructor(props) {\n      super(props);\n\n      this.cacher = new Cacher();\n      this.state = {\n        coordinates: {\n          lat: 0,\n          lng: 0\n        },\n        isError: false,\n        isLocationLoaded: false\n      };\n    }\n\n    componentDidMount() {\n      this.getGeocodeLocation();\n    }\n    updateCoordinates(coordinates) {\n      this.props.mapLoaded();\n\n      this.setState({\n        coordinates,\n        isLocationLoaded: true\n      });\n    }\n    geocodeLocation(location) {\n      const geocoder = new window.google.maps.Geocoder();\n\n      return new Promise((resolve, reject) => {\n        geocoder.geocode({ address: location }, (result, status) => {\n          if (status === \"OK\") {\n            const geometry = result[0].geometry.location;\n            const coordinates = { lat: geometry.lat(), lng: geometry.lng() };\n            this.cacher.cacheValue(location, coordinates);\n            resolve(coordinates);\n          } else {\n            reject(\"ERROR\");\n          }\n        });\n      });\n    }\n    getGeocodeLocation() {\n      const location = this.props.location;\n\n      //if location is cached returned cached value\n      if (this.cacher.isValueCached(location)) {\n        this.setState({ coordinates: this.cacher.getCachedValue(location) });\n      }\n      //else geocode location\n      else {\n        this.geocodeLocation(location).then(\n          coordinates => {\n            this.setState({ coordinates });\n          },\n          error => {\n            console.log(error);\n            this.props.mapLoaded();\n            this.setState({ isLocationLoaded: true, isError: true });\n          }\n        );\n      }\n    }\n\n    render() {\n      return <WrappedComponent {...this.state} />;\n    }\n  };\n}\n\nexport const MapWithAMarker = withScriptjs(\n  withGoogleMap(withGeocode(MapComponent))\n);\n"]},"metadata":{},"sourceType":"module"}