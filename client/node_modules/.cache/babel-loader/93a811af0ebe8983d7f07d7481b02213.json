{"ast":null,"code":"var _jsxFileName = \"/Users/Julie-Marie-Carra/Desktop/server/client/src/components/GoogleMap/GoogleMap.jsx\";\nimport React from \"react\";\nimport { withScriptjs, withGoogleMap, GoogleMap, Marker } from \"react-google-maps\";\nconst MapWithAMarker = withScriptjs(withGoogleMap(props => React.createElement(GoogleMap, {\n  defaultZoom: 8,\n  defaultCenter: {\n    lat: -34.397,\n    lng: 150.644\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 12\n  },\n  __self: this\n}, React.createElement(Marker, {\n  position: {\n    lat: -34.397,\n    lng: 150.644\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 13\n  },\n  __self: this\n}))));\n\nfunction withGeocode(WrappedComponent) {\n  return class extends React.Component {\n    constructor() {\n      super();\n      this.cacher = new Cacher();\n      this.state = {\n        coordinates: {\n          lat: 0,\n          lng: 0\n        },\n        isError: false,\n        isLocationLoaded: false\n      };\n    }\n\n    componentWillMount() {\n      this.getGeocodedLocation();\n    }\n\n    componentDidUpdate() {\n      if (this.props.isReloading) {\n        this.getGeocodedLocation();\n      }\n    }\n\n    updateCoordinates(coordinates) {\n      this.props.mapLoaded();\n      this.setState({\n        coordinates,\n        isLocationLoaded: true\n      });\n    }\n\n    geocodeLocation(location) {\n      const geocoder = new window.google.maps.Geocoder();\n      return new Promise((resolve, reject) => {\n        geocoder.geocode({\n          address: location\n        }, (result, status) => {\n          if (status === \"OK\") {\n            const geometry = result[0].geometry.location;\n            const coordinates = {\n              lat: geometry.lat(),\n              lng: geometry.lng()\n            };\n            this.cacher.cacheValue(location, coordinates);\n            resolve(coordinates);\n          } else {\n            reject(\"ERROR!!!!\");\n          }\n        });\n      });\n    }\n\n    getGeocodedLocation() {\n      const location = this.props.location;\n\n      if (this.cacher.isValueCached(location)) {\n        this.updateCoordinates(this.cacher.getCachedValue(location));\n      } else {\n        this.geocodeLocation(location).then(coordinates => {\n          this.updateCoordinates(coordinates);\n        }, error => {\n          this.props.mapLoaded();\n          this.setState({\n            isLocationLoaded: true,\n            isError: true\n          });\n        });\n      }\n    }\n\n    render() {\n      return React.createElement(WrappedComponent, Object.assign({}, this.state, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }));\n    }\n\n  };\n}\n\nexport const MapWithGeocode = withScriptjs(withGoogleMap(withGeocode));","map":{"version":3,"sources":["/Users/Julie-Marie-Carra/Desktop/server/client/src/components/GoogleMap/GoogleMap.jsx"],"names":["React","withScriptjs","withGoogleMap","GoogleMap","Marker","MapWithAMarker","props","lat","lng","withGeocode","WrappedComponent","Component","constructor","cacher","Cacher","state","coordinates","isError","isLocationLoaded","componentWillMount","getGeocodedLocation","componentDidUpdate","isReloading","updateCoordinates","mapLoaded","setState","geocodeLocation","location","geocoder","window","google","maps","Geocoder","Promise","resolve","reject","geocode","address","result","status","geometry","cacheValue","isValueCached","getCachedValue","then","error","render","MapWithGeocode"],"mappings":"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","sourcesContent":["import React from \"react\";\n\nimport {\n  withScriptjs,\n  withGoogleMap,\n  GoogleMap,\n  Marker\n} from \"react-google-maps\";\n\nconst MapWithAMarker = withScriptjs(\n  withGoogleMap(props => (\n    <GoogleMap defaultZoom={8} defaultCenter={{ lat: -34.397, lng: 150.644 }}>\n      <Marker position={{ lat: -34.397, lng: 150.644 }} />\n    </GoogleMap>\n  ))\n);\n\nfunction withGeocode(WrappedComponent) {\n  return class extends React.Component {\n    constructor() {\n      super();\n\n      this.cacher = new Cacher();\n\n      this.state = {\n        coordinates: {\n          lat: 0,\n          lng: 0\n        },\n        isError: false,\n        isLocationLoaded: false\n      };\n    }\n\n    componentWillMount() {\n      this.getGeocodedLocation();\n    }\n\n    componentDidUpdate() {\n      if (this.props.isReloading) {\n        this.getGeocodedLocation();\n      }\n    }\n\n    updateCoordinates(coordinates) {\n      this.props.mapLoaded();\n\n      this.setState({\n        coordinates,\n        isLocationLoaded: true\n      });\n    }\n\n    geocodeLocation(location) {\n      const geocoder = new window.google.maps.Geocoder();\n\n      return new Promise((resolve, reject) => {\n        geocoder.geocode({ address: location }, (result, status) => {\n          if (status === \"OK\") {\n            const geometry = result[0].geometry.location;\n            const coordinates = { lat: geometry.lat(), lng: geometry.lng() };\n\n            this.cacher.cacheValue(location, coordinates);\n\n            resolve(coordinates);\n          } else {\n            reject(\"ERROR!!!!\");\n          }\n        });\n      });\n    }\n\n    getGeocodedLocation() {\n      const location = this.props.location;\n\n      if (this.cacher.isValueCached(location)) {\n        this.updateCoordinates(this.cacher.getCachedValue(location));\n      } else {\n        this.geocodeLocation(location).then(\n          coordinates => {\n            this.updateCoordinates(coordinates);\n          },\n          error => {\n            this.props.mapLoaded();\n            this.setState({ isLocationLoaded: true, isError: true });\n          }\n        );\n      }\n    }\n\n    render() {\n      return <WrappedComponent {...this.state} />;\n    }\n  };\n}\n\nexport const MapWithGeocode = withScriptjs(withGoogleMap(withGeocode));\n"]},"metadata":{},"sourceType":"module"}