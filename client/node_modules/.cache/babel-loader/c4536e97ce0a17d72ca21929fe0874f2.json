{"ast":null,"code":"var _jsxFileName = \"/Users/Julie-Marie-Carra/Desktop/server/client/src/components/GoogleMap/GoogleMap.jsx\";\n// import React from \"react\";\n// //import { Cacher } from \"../../services/cacher\";\n// import {\n//   withScriptjs,\n//   withGoogleMap,\n//   GoogleMap,\n//   Circle,\n//   InfoWindow\n// } from \"react-google-maps\";\n// function MapComponent(props) {\n//   const { coordinates, isError, isLocationLoaded } = props;\n//   return (\n//     <GoogleMap\n//       defaultZoom={13}\n//       defaultCenter={coordinates}\n//       center={coordinates}\n//       options={{ disableDefaultUI: isError ? true : false }}\n//     >\n//       {isLocationLoaded && !isError && (\n//         <Circle center={coordinates} radius={500} />\n//       )}\n//       {isLocationLoaded && isError && (\n//         <InfoWindow position={coordinates} options={{ maxWidth: 300 }}>\n//           <div>\n//             Uuuuups, there is problem to find location on the map, we are trying\n//             to resolve problem as fast as possible. Contact host for additional\n//             informations if you are still interested in booking this place. We\n//             are sorry for incoviniance.\n//           </div>\n//         </InfoWindow>\n//       )}\n//     </GoogleMap>\n//   );\n// }\n// function withGeocode(WrappedComponent) {\n//   return class extends React.Component {\n//     constructor() {\n//       super();\n//       // this.cacher = new Cacher();\n//       this.state = {\n//         coordinates: {\n//           lat: 0,\n//           lng: 0\n//         },\n//         isError: false,\n//         isLocationLoaded: false\n//       };\n//     }\n//     // componentWillMount() {\n//     //   this.getGeocodedLocation();\n//     // }\n//     componentDidUpdate() {\n//       if (this.props.isReloading) {\n//         this.getGeocodedLocation();\n//       }\n//     }\n//     updateCoordinates(coordinates) {\n//       this.props.mapLoaded();\n//       this.setState({\n//         coordinates,\n//         isLocationLoaded: true\n//       });\n//     }\n//     geocodeLocation(location) {\n//       const geocoder = new window.google.maps.Geocoder();\n//       return new Promise((resolve, reject) => {\n//         geocoder.geocode({ address: location }, (result, status) => {\n//           if (status === \"OK\") {\n//             const geometry = result[0].geometry.location;\n//             const coordinates = { lat: geometry.lat(), lng: geometry.lng() };\n//             //   this.cacher.cacheValue(location, coordinates);\n//             resolve(coordinates);\n//           } else {\n//             reject(\"ERROR!!!!\");\n//           }\n//         });\n//       });\n//     }\n//     // getGeocodedLocation() {\n//     //   const location = this.props.location;\n//     //   if (this.cacher.isValueCached(location)) {\n//     //     this.updateCoordinates(this.cacher.getCachedValue(location));\n//     //   } else {\n//     //     this.geocodeLocation(location).then(\n//     //       coordinates => {\n//     //         this.updateCoordinates(coordinates);\n//     //       },\n//     //       error => {\n//     //         this.props.mapLoaded();\n//     //         this.setState({ isLocationLoaded: true, isError: true });\n//     //       }\n//     //     );\n//     //   }\n//     // }\n//     render() {\n//       return <WrappedComponent {...this.state} />;\n//     }\n//   };\n// }\n// export const MapWithGeocode = withScriptjs(\n//   withGoogleMap(withGeocode(MapComponent))\n// );\nimport React from \"react\";\nimport { withScriptjs, withGoogleMap, GoogleMap, Marker, Circle } from \"react-google-maps\";\n\nfunction MapComponent(props) {\n  const {\n    coordinates\n  } = props;\n  return React.createElement(GoogleMap, {\n    defaultZoom: 8,\n    defaultCenter: coordinates,\n    center: coordinates,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, React.createElement(Circle, {\n    position: coordinates,\n    radius: 500,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }));\n}\n\nfunction withGeocode(WrappedComponent) {\n  return class extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        coordinates: {\n          lat: 0,\n          lng: 0\n        }\n      };\n    }\n\n    componentDidMount() {\n      this.geocodeLocation();\n    }\n\n    geocodeLocation() {\n      const location = this.props.location;\n      const geocoder = new window.google.maps.Geocoder();\n      geocoder.geocode({\n        address: location\n      }, (result, status) => {\n        if (status === \"OK\") {\n          const geometry = result[0].geometry.location;\n          const coordinates = {\n            lat: geometry.lat(),\n            lng: geometry.lng()\n          };\n          this.setState({\n            coordinates\n          });\n        }\n      });\n    }\n\n    render() {\n      return React.createElement(WrappedComponent, Object.assign({}, this.state, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }));\n    }\n\n  };\n}\n\nexport const MapWithAMarker = withScriptjs(withGoogleMap(withGeocode(MapComponent)));","map":{"version":3,"sources":["/Users/Julie-Marie-Carra/Desktop/server/client/src/components/GoogleMap/GoogleMap.jsx"],"names":["React","withScriptjs","withGoogleMap","GoogleMap","Marker","Circle","MapComponent","props","coordinates","withGeocode","WrappedComponent","Component","constructor","state","lat","lng","componentDidMount","geocodeLocation","location","geocoder","window","google","maps","Geocoder","geocode","address","result","status","geometry","setState","render","MapWithAMarker"],"mappingskB,OAAlB;AAEA,SACEC,YADF,EAEEC,aAFF,EAGEC,SAHF,EAIEC,MAJF,EAKEC,MALF,QAMO,mBANP;;AAQA,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAC3B,QAAM;AAAEC,IAAAA;AAAF,MAAkBD,KAAxB;AACA,SACE,oBAAC,SAAD;AAAW,IAAA,WAAW,EAAE,CAAxB;AAA2B,IAAA,aAAa,EAAEC,WAA1C;AAAuD,IAAA,MAAM,EAAEA,WAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AAAQ,IAAA,QAAQ,EAAEA,WAAlB;AAA+B,IAAA,MAAM,EAAE,GAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD;;AAED,SAASC,WAAT,CAAqBC,gBAArB,EAAuC;AACrC,SAAO,cAAcV,KAAK,CAACW,SAApB,CAA8B;AACnCC,IAAAA,WAAW,CAACL,KAAD,EAAQ;AACjB,YAAMA,KAAN;AAEA,WAAKM,KAAL,GAAa;AACXL,QAAAA,WAAW,EAAE;AACXM,UAAAA,GAAG,EAAE,CADM;AAEXC,UAAAA,GAAG,EAAE;AAFM;AADF,OAAb;AAMD;;AAEDC,IAAAA,iBAAiB,GAAG;AAClB,WAAKC,eAAL;AACD;;AAEDA,IAAAA,eAAe,GAAG;AAChB,YAAMC,QAAQ,GAAG,KAAKX,KAAL,CAAWW,QAA5B;AACA,YAAMC,QAAQ,GAAG,IAAIC,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmBC,QAAvB,EAAjB;AAEAJ,MAAAA,QAAQ,CAACK,OAAT,CAAiB;AAAEC,QAAAA,OAAO,EAAEP;AAAX,OAAjB,EAAwC,CAACQ,MAAD,EAASC,MAAT,KAAoB;AAC1D,YAAIA,MAAM,KAAK,IAAf,EAAqB;AACnB,gBAAMC,QAAQ,GAAGF,MAAM,CAAC,CAAD,CAAN,CAAUE,QAAV,CAAmBV,QAApC;AACA,gBAAMV,WAAW,GAAG;AAAEM,YAAAA,GAAG,EAAEc,QAAQ,CAACd,GAAT,EAAP;AAAuBC,YAAAA,GAAG,EAAEa,QAAQ,CAACb,GAAT;AAA5B,WAApB;AACA,eAAKc,QAAL,CAAc;AAAErB,YAAAA;AAAF,WAAd;AACD;AACF,OAND;AAOD;;AAEDsB,IAAAA,MAAM,GAAG;AACP,aAAO,oBAAC,gBAAD,oBAAsB,KAAKjB,KAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACD;;AA/BkC,GAArC;AAiCD;;AAED,OAAO,MAAMkB,cAAc,GAAG9B,YAAY,CACxCC,aAAa,CAACO,WAAW,CAACH,YAAD,CAAZ,CAD2B,CAAnC","sourcesContent":["// import React from \"react\";\n// //import { Cacher } from \"../../services/cacher\";\n\n// import {\n//   withScriptjs,\n//   withGoogleMap,\n//   GoogleMap,\n//   Circle,\n//   InfoWindow\n// } from \"react-google-maps\";\n\n// function MapComponent(props) {\n//   const { coordinates, isError, isLocationLoaded } = props;\n\n//   return (\n//     <GoogleMap\n//       defaultZoom={13}\n//       defaultCenter={coordinates}\n//       center={coordinates}\n//       options={{ disableDefaultUI: isError ? true : false }}\n//     >\n//       {isLocationLoaded && !isError && (\n//         <Circle center={coordinates} radius={500} />\n//       )}\n//       {isLocationLoaded && isError && (\n//         <InfoWindow position={coordinates} options={{ maxWidth: 300 }}>\n//           <div>\n//             Uuuuups, there is problem to find location on the map, we are trying\n//             to resolve problem as fast as possible. Contact host for additional\n//             informations if you are still interested in booking this place. We\n//             are sorry for incoviniance.\n//           </div>\n//         </InfoWindow>\n//       )}\n//     </GoogleMap>\n//   );\n// }\n\n// function withGeocode(WrappedComponent) {\n//   return class extends React.Component {\n//     constructor() {\n//       super();\n\n//       // this.cacher = new Cacher();\n\n//       this.state = {\n//         coordinates: {\n//           lat: 0,\n//           lng: 0\n//         },\n//         isError: false,\n//         isLocationLoaded: false\n//       };\n//     }\n\n//     // componentWillMount() {\n//     //   this.getGeocodedLocation();\n//     // }\n\n//     componentDidUpdate() {\n//       if (this.props.isReloading) {\n//         this.getGeocodedLocation();\n//       }\n//     }\n\n//     updateCoordinates(coordinates) {\n//       this.props.mapLoaded();\n\n//       this.setState({\n//         coordinates,\n//         isLocationLoaded: true\n//       });\n//     }\n\n//     geocodeLocation(location) {\n//       const geocoder = new window.google.maps.Geocoder();\n\n//       return new Promise((resolve, reject) => {\n//         geocoder.geocode({ address: location }, (result, status) => {\n//           if (status === \"OK\") {\n//             const geometry = result[0].geometry.location;\n//             const coordinates = { lat: geometry.lat(), lng: geometry.lng() };\n\n//             //   this.cacher.cacheValue(location, coordinates);\n\n//             resolve(coordinates);\n//           } else {\n//             reject(\"ERROR!!!!\");\n//           }\n//         });\n//       });\n//     }\n\n//     // getGeocodedLocation() {\n//     //   const location = this.props.location;\n\n//     //   if (this.cacher.isValueCached(location)) {\n//     //     this.updateCoordinates(this.cacher.getCachedValue(location));\n//     //   } else {\n//     //     this.geocodeLocation(location).then(\n//     //       coordinates => {\n//     //         this.updateCoordinates(coordinates);\n//     //       },\n//     //       error => {\n//     //         this.props.mapLoaded();\n//     //         this.setState({ isLocationLoaded: true, isError: true });\n//     //       }\n//     //     );\n//     //   }\n//     // }\n\n//     render() {\n//       return <WrappedComponent {...this.state} />;\n//     }\n//   };\n// }\n\n// export const MapWithGeocode = withScriptjs(\n//   withGoogleMap(withGeocode(MapComponent))\n// );\n\nimport React from \"react\";\n\nimport {\n  withScriptjs,\n  withGoogleMap,\n  GoogleMap,\n  Marker,\n  Circle\n} from \"react-google-maps\";\n\nfunction MapComponent(props) {\n  const { coordinates } = props;\n  return (\n    <GoogleMap defaultZoom={8} defaultCenter={coordinates} center={coordinates}>\n      <Circle position={coordinates} radius={500} />\n    </GoogleMap>\n  );\n}\n\nfunction withGeocode(WrappedComponent) {\n  return class extends React.Component {\n    constructor(props) {\n      super(props);\n\n      this.state = {\n        coordinates: {\n          lat: 0,\n          lng: 0\n        }\n      };\n    }\n\n    componentDidMount() {\n      this.geocodeLocation();\n    }\n\n    geocodeLocation() {\n      const location = this.props.location;\n      const geocoder = new window.google.maps.Geocoder();\n\n      geocoder.geocode({ address: location }, (result, status) => {\n        if (status === \"OK\") {\n          const geometry = result[0].geometry.location;\n          const coordinates = { lat: geometry.lat(), lng: geometry.lng() };\n          this.setState({ coordinates });\n        }\n      });\n    }\n\n    render() {\n      return <WrappedComponent {...this.state} />;\n    }\n  };\n}\n\nexport const MapWithAMarker = withScriptjs(\n  withGoogleMap(withGeocode(MapComponent))\n);\n"]},"metadata":{},"sourceType":"module"}