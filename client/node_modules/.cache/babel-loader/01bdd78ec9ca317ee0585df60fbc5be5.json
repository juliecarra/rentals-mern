{"ast":null,"code":"var _jsxFileName = \"/Users/Julie-Marie-Carra/Desktop/server/client/src/components/GoogleMap/GoogleMap.jsx\";\nimport React from \"react\";\nimport { Cacher } from \"../../services/cacher\";\nimport { withScriptjs, withGoogleMap, GoogleMap, Circle, InfoWindow } from \"react-google-maps\";\n\nfunction MapComponent(props) {\n  const {\n    coordinates,\n    isError,\n    isLocationLoaded\n  } = props;\n  return React.createElement(GoogleMap, {\n    defaultZoom: 13,\n    defaultCenter: coordinates,\n    center: coordinates,\n    options: {\n      disableDefaultUI: isError ? true : false\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, isLocationLoaded && !isError && React.createElement(Circle, {\n    center: coordinates,\n    radius: 500,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }), isLocationLoaded && isError && React.createElement(InfoWindow, {\n    position: coordinates,\n    options: {\n      maxWidth: 300\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, \"Uuuuups, there is problem to find location on the map, we are trying to resolve problem as fast as possible. Contact host for additional informations if you are still interested in booking this place. We are sorry for incoviniance.\")));\n}\n\nfunction withGeocode(WrappedComponent) {\n  return class extends React.Component {\n    constructor() {\n      super();\n      this.cacher = new Cacher();\n      this.state = {\n        coordinates: {\n          lat: 0,\n          lng: 0\n        },\n        isError: false,\n        isLocationLoaded: false\n      };\n    }\n\n    componentWillMount() {\n      this.getGeocodedLocation();\n    }\n\n    componentDidUpdate() {\n      if (this.props.isReloading) {\n        this.getGeocodedLocation();\n      }\n    }\n\n    updateCoordinates(coordinates) {\n      this.props.mapLoaded();\n      this.setState({\n        coordinates,\n        isLocationLoaded: true\n      });\n    }\n\n    geocodeLocation(location) {\n      const geocoder = new window.google.maps.Geocoder();\n      return new Promise((resolve, reject) => {\n        geocoder.geocode({\n          address: location\n        }, (result, status) => {\n          if (status === \"OK\") {\n            const geometry = result[0].geometry.location;\n            const coordinates = {\n              lat: geometry.lat(),\n              lng: geometry.lng()\n            };\n            this.cacher.cacheValue(location, coordinates);\n            resolve(coordinates);\n          } else {\n            reject(\"ERROR!!!!\");\n          }\n        });\n      });\n    }\n\n    getGeocodedLocation() {\n      const location = this.props.location;\n\n      if (this.cacher.isValueCached(location)) {\n        this.updateCoordinates(this.cacher.getCachedValue(location));\n      } else {\n        this.geocodeLocation(location).then(coordinates => {\n          this.updateCoordinates(coordinates);\n        }, error => {\n          this.props.mapLoaded();\n          this.setState({\n            isLocationLoaded: true,\n            isError: true\n          });\n        });\n      }\n    }\n\n    render() {\n      return React.createElement(WrappedComponent, Object.assign({}, this.state, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }));\n    }\n\n  };\n}\n\nexport const MapWithGeocode = withScriptjs(withGoogleMap(withGeocode(MapComponent)));","map":{"version":3,"sources":["/Users/Julie-Marie-Carra/Desktop/server/client/src/components/GoogleMap/GoogleMap.jsx"],"names":["React","Cacher","withScriptjs","withGoogleMap","GoogleMap","Circle","InfoWindow","MapComponent","props","coordinates","isError","isLocationLoaded","disableDefaultUI","maxWidth","withGeocode","WrappedComponent","Component","constructor","cacher","state","lat","lng","componentWillMount","getGeocodedLocation","componentDidUpdate","isReloading","updateCoordinates","mapLoaded","setState","geocodeLocation","location","geocoder","window","google","maps","Geocoder","Promise","resolve","reject","geocode","address","result","status","geometry","cacheValue","isValueCached","getCachedValue","then","error","render","MapWithGeocode"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Cacher } from \"../../services/cacher\";\n\nimport {\n  withScriptjs,\n  withGoogleMap,\n  GoogleMap,\n  Circle,\n  InfoWindow\n} from \"react-google-maps\";\n\nfunction MapComponent(props) {\n  const { coordinates, isError, isLocationLoaded } = props;\n\n  return (\n    <GoogleMap\n      defaultZoom={13}\n      defaultCenter={coordinates}\n      center={coordinates}\n      options={{ disableDefaultUI: isError ? true : false }}\n    >\n      {isLocationLoaded && !isError && (\n        <Circle center={coordinates} radius={500} />\n      )}\n      {isLocationLoaded && isError && (\n        <InfoWindow position={coordinates} options={{ maxWidth: 300 }}>\n          <div>\n            Uuuuups, there is problem to find location on the map, we are trying\n            to resolve problem as fast as possible. Contact host for additional\n            informations if you are still interested in booking this place. We\n            are sorry for incoviniance.\n          </div>\n        </InfoWindow>\n      )}\n    </GoogleMap>\n  );\n}\n\nfunction withGeocode(WrappedComponent) {\n  return class extends React.Component {\n    constructor() {\n      super();\n\n      this.cacher = new Cacher();\n\n      this.state = {\n        coordinates: {\n          lat: 0,\n          lng: 0\n        },\n        isError: false,\n        isLocationLoaded: false\n      };\n    }\n\n    componentWillMount() {\n      this.getGeocodedLocation();\n    }\n\n    componentDidUpdate() {\n      if (this.props.isReloading) {\n        this.getGeocodedLocation();\n      }\n    }\n\n    updateCoordinates(coordinates) {\n      this.props.mapLoaded();\n\n      this.setState({\n        coordinates,\n        isLocationLoaded: true\n      });\n    }\n\n    geocodeLocation(location) {\n      const geocoder = new window.google.maps.Geocoder();\n\n      return new Promise((resolve, reject) => {\n        geocoder.geocode({ address: location }, (result, status) => {\n          if (status === \"OK\") {\n            const geometry = result[0].geometry.location;\n            const coordinates = { lat: geometry.lat(), lng: geometry.lng() };\n\n            this.cacher.cacheValue(location, coordinates);\n\n            resolve(coordinates);\n          } else {\n            reject(\"ERROR!!!!\");\n          }\n        });\n      });\n    }\n\n    getGeocodedLocation() {\n      const location = this.props.location;\n\n      if (this.cacher.isValueCached(location)) {\n        this.updateCoordinates(this.cacher.getCachedValue(location));\n      } else {\n        this.geocodeLocation(location).then(\n          coordinates => {\n            this.updateCoordinates(coordinates);\n          },\n          error => {\n            this.props.mapLoaded();\n            this.setState({ isLocationLoaded: true, isError: true });\n          }\n        );\n      }\n    }\n\n    render() {\n      return <WrappedComponent {...this.state} />;\n    }\n  };\n}\n\nexport const MapWithGeocode = withScriptjs(\n  withGoogleMap(withGeocode(MapComponent))\n);\n"]},"metadata":{},"sourceType":"module"}